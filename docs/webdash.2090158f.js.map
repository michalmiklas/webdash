{"version":3,"sources":["flask.ts","worker-loader.ts","webdash.ts"],"names":[],"mappings":"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","file":"webdash.2090158f.js","sourceRoot":"../src","sourcesContent":["import { WorkerManager } from \"./worker-loader\";\nimport { log } from \"./webdash\";\n\n/**\n * A small, virtual web server emulating Flask (Python).\n */\nexport class WebFlask {\n  constructor() {\n    // TODO: Implement an API to add/remove routes\n    this.router = {\n      \"/_dash-layout\": () => `\n            x = app.serve_layout()\n            x`,\n      \"/_dash-dependencies\": () => `\n          with app.server.app_context(): \n            x = app.dependencies()\n          x`,\n      \"/_dash-update-component\": this.postRequest,\n    };\n    this.worker = window.workerManager;\n    this.originalFetch = window.fetch;\n    window.fetch = this.fetch.bind(this);\n    // Commenting this out until we have a working solution for XHR intercepts.\n    // this.originalXHROpen = window.XMLHttpRequest.prototype.open;\n    // window.XMLHttpRequest.prototype.open = this.xmlHttpRequestOpen.bind(this);\n  }\n\n  /**\n   * Sends a POST request to the Python Flask backend.\n   * @param req Request Object\n   * @param init request payload\n   */\n  postRequest(req, init) {\n    log(\"[POST Request]\", req, init);\n    return `\n    with app.server.test_request_context('${req}', \n      data='''${init.body}''', \n      content_type=\"application/json\"): \n      x = app.dispatch()\n    x`;\n  }\n\n  /**\n   * Retrieves a Flask response object and converts it\n   * to a compatible Response object.\n   * @param codeWillRun stringified python code\n   */\n  async generateResponse(codeWillRun) {\n    log(\"[2. Flask Request Generated]\");\n    const flaskRespone = await this.worker.asyncRun(codeWillRun, {});\n    log(\"[5. Flask Response Received]\", flaskRespone);\n    const response = new Response(flaskRespone[\"response\"], {\n      headers: flaskRespone[\"headers\"],\n    });\n    return response;\n  }\n\n  /**\n   * A custom fetch function which intercepts Flask requests\n   * and routes to the Python backend.\n   * @param req Request object\n   * @param init request payload\n   */\n  async fetch(\n    req: Request,\n    init?: RequestInit | null | undefined\n  ): Promise<Response> {\n    // TODO: handle raw requests in addition to strings\n    log(\"[1. Request Intercepted]\", req, init);\n    const url = new URL(new Request(req).url);\n\n    let codeWillRun = this.router[url.pathname];\n    if (codeWillRun) {\n      log(url.pathname);\n      const resp = await this.generateResponse(codeWillRun(req, init));\n      log(`[6. ${url.pathname} done.]`, resp);\n      return resp;\n    } else {\n      log(\"[Passthrough Request]\");\n      return this.originalFetch.apply(this, [req, init]);\n    }\n  }\n\n  /**\n   * Hooks into the 'open' method of XMLHttpRequest. This\n   * allows us to intercept get requests and redirect them\n   * to the Flask backend when appropriate. (not currently functional!)\n   */\n  xmlHttpRequestOpen(...args): void {\n    let method,\n      url,\n      async,\n      user,\n      password = args;\n    console.log(\"Method: \", method);\n    console.log(\"URL: \", url);\n\n    return this.originalXHROpen.apply(this, ...args);\n  }\n\n  router: Router;\n  worker: WorkerManager;\n  originalFetch: (request: any, response: any) => Promise<Response>;\n  originalXHROpen: Function;\n}\n\ntype Router = { [key: string]: Function };\n","import { log } from \"./webdash\";\n/**\n * A small queue where we queue \"OnSuccess\" functions\n * for each request sent. For each request, a success\n * function gets queued. Upon each incoming message,\n * we dequeue and execute the \"OnSuccess function\".\n *\n * TODO: Implement a more efficient queuing system.\n */\nclass ResponseQueue {\n  constructor() {\n    this.queue = [];\n  }\n  enqueue(onSuccessFn: Function) {\n    return this.queue.push(onSuccessFn);\n  }\n  dequeue() {\n    return this.queue.shift();\n  }\n\n  queue: Array<Function>;\n}\n\n/**\n * This class is used as an intermediary between\n * the WebWorker and the application client.\n * It currently supports two main message types:\n *\n *  1. HTTP Request/Response objects.\n *  2. binary file transfers.\n */\nexport class WorkerManager {\n  constructor() {\n    this.queue = new ResponseQueue();\n    this.worker = new Worker(\"./worker.js\");\n  }\n\n  /**\n   * Runs Python code on the WebWorker.\n   * @param script python script\n   * @param context additional payload\n   * @param onSuccess callback function if executed successfully\n   * @param onError callback function for if errored\n   */\n  run(\n    script: string,\n    context: Payload,\n    onSuccess: Function,\n    onError: Function\n  ): void {\n    this.queue.enqueue(onSuccess);\n    this.worker.onerror = (e) => onError(e);\n    this.worker.onmessage = this.processMessage.bind(this);\n    this.worker.postMessage({\n      ...context,\n      python: script,\n    });\n  }\n\n  /**\n   * Processes messages received by the 'run' function.\n   * This includes console.log messages for the intitial\n   * bootstrap phase.\n   * @param e Message object\n   * @returns void or resolved promise\n   */\n  processMessage(e): Function | void {\n    log(\"[4. Message received from worker]\", e.data);\n\n    // Update status tracker if this is a console.log message\n    if (e.data.consoleMessage) {\n      const statusBar = document.querySelector(\".status\");\n      if (statusBar) {\n        statusBar.innerHTML = e.data.consoleMessage;\n      }\n      return;\n    }\n\n    // Otherwise this is a response for dash-renderer\n    // and we should act on it.\n    const success = this.queue.dequeue();\n    return success(e.data.results);\n  }\n\n  /**\n   * Runs a Python script on the WebWorker.\n   * @param script python script to run\n   * @param context optional additional arguments\n   * @returns BlobPart or string\n   */\n  asyncRun(script: string, context: Payload): Promise<BlobPart | string> {\n    return new Promise(\n      (onSuccess: Function, onError: (e: ErrorEvent) => any) => {\n        this.run(script, context, onSuccess, onError);\n      }\n    );\n  }\n\n  /**\n   * Reads a directory from the virtual file system.\n   * @param dir directory name\n   * @returns a list of files present in the directory\n   */\n  async fsReadDir(dir: string): Promise<string[]> {\n    return new Promise(\n      (onSuccess: Function, onError: (e: ErrorEvent) => any) => {\n        this.worker.onerror = onError;\n        this.worker.onmessage = (e: MessageEvent) => onSuccess(e.data.results);\n        this.worker.postMessage({\n          fsCommands: {\n            msgType: \"readdir\",\n            param: dir,\n          },\n        });\n      }\n    );\n  }\n\n  /**\n   * Reads a file from the virtual file system.\n   * @param file filename\n   * @returns a binary array with the file content\n   */\n  async fsReadFile(file: string): Promise<BlobPart | string> {\n    return new Promise(\n      (onSuccess: Function, onError: (e: ErrorEvent) => any) => {\n        this.worker.onerror = onError;\n        this.worker.onmessage = (e: MessageEvent) => onSuccess(e.data.results);\n        this.worker.postMessage({\n          fsCommands: {\n            msgType: \"readFile\",\n            param: file,\n          },\n        });\n      }\n    );\n  }\n\n  queue: ResponseQueue;\n  worker: Worker;\n}\n\ntype Payload = { [key: string]: any };\n","import { WebFlask } from \"./flask\";\nimport { WorkerManager } from \"./worker-loader\";\n\nconst PYTHON_VERSION = 3.9;\nconst sitePackagesDir = `/lib/python${PYTHON_VERSION}/site-packages/`;\nconst directoryMap = {\n  \"deps\": `${sitePackagesDir}dash/deps/`,\n  \"dash-renderer\": `${sitePackagesDir}dash/dash-renderer/build`,\n  \"dcc\": `${sitePackagesDir}dash/dcc/`,\n  \"html\": `${sitePackagesDir}dash/html/`,\n  \"dash_table\": `${sitePackagesDir}dash/dash_table/`\n}\n\ndeclare global {\n  export interface Window {\n    fetch: Function;\n    workerManager: WorkerManager;\n    dashApp: string;\n    webDash: WebDash;\n    log: Function;\n  }\n}\n\n/**\n * Enables debug logs for development environments.\n */\nexport let dev = false;\nif (process.env.NODE_ENV === \"development\") {\n  dev = true;\n}\n\nexport function log(...args) {\n  if (dev) {\n    console.log(...args);\n  }\n}\n\n/**\n * The entry point for WebDash. It is responsible for\n * instantiating and coordinating the different\n * components which make up the communication\n * between the Dash frontend and the virtual\n * Flask backend running in WASM.\n */\nclass WebDash {\n  constructor() {\n    this.fileMap = {};\n    window.workerManager = new WorkerManager();\n    this.webFlask = new WebFlask();\n    this.main();\n  }\n\n  /**\n   * Used as the \"boot sequence\" for getting\n   * the Dash application up and running.\n   */\n  async main() {\n    const indexContent = await this.injectDashApp();\n    const scriptChunk = await this.generateScripts(indexContent);\n    await this.populateFileMap();\n    log(\"Starting book sequence\");\n    await this.startBootSequence(scriptChunk);\n    log(\"Finished boot sequence\");\n  }\n\n  /**\n   * This functions feeds the input dash application to the Flask\n   * backend. Once that is done, the function injects the Dash \n   * application to the current web page by invoking the index page\n   * function on the Dash backend. The returned string is then \n   * appended to the page.\n   * @returns HTML string\n   */\n  async injectDashApp() {\n    return window.workerManager.asyncRun(\n      `\n${window.dashApp}\napp.index()\n      `,\n      {}\n    );\n  }\n\n  /**\n   * Invokes a function on the Dash side which returns a list\n   * of JavaScript tags for a number of front-end Dash dependencies.\n   * @param indexContent \n   * @returns A list of HTML script tags\n   */\n  async generateScripts(indexContent) {\n    document.getElementsByTagName(\"html\")[0].innerHTML = indexContent;\n    return window.workerManager.asyncRun(\n      `\n          app._generate_scripts_html()\n      `,\n      {}\n    );\n  }\n\n  /**\n   * This function is responsible for parsing the HTML script tags and\n   * loading the scripts as binary blobs, from the virtual file system,\n   * into the existing web page.\n   * @param scriptChunk \n   */\n  async startBootSequence(scriptChunk) {\n    const scriptTagsChunk = scriptChunk.split(\"\\n\");\n    /**\n     * Parsing each script tag sent to WebDash by the Dash backend. From that tag\n     * we identify the target package to be loaded, and we search for it in the\n     * virtual file system. If it's found, we create a binary blob from it and\n     * append to the rendered page for immediate loading.\n     * \n     * NOTE: dash_core_components and dash_html_components are loaded separately\n     *       below this loop\n     */\n    const scriptTags = [];\n    for (const script of scriptTagsChunk) {\n      log(`Parsing script tag: ${script}`)\n      let scriptTag = document.createElement(\"script\");\n      const [route, parentDirName, subDirName, ...rest] = script.match(/(?<=[\\/])[^\\/]+/g);\n      const fileName = rest[rest.length - 2]\n      const fileNamePrefix = fileName.match(/[^.@]+/g)[0];\n      const packageDir = directoryMap[subDirName]\n      const curDirFiles = await window.workerManager.fsReadDir(packageDir);\n\n      // Match requested file names with local copies\n      for (const file of curDirFiles) {\n        const ext = file.match(/([.@].*\\min\\.js)/g);\n        const fileName = `${fileNamePrefix}${ext}`;\n        if (file === fileName) {\n          const fullPath = `${packageDir}/${fileName}`;\n          log(`Adding script: ${fullPath}`);\n          const data = new Blob(\n            [await window.workerManager.fsReadFile(fullPath)],\n            {\n              type: \"text/javascript\",\n            }\n          );\n          log(`Script blob: ${data}`);\n          const url = URL.createObjectURL(data);\n          scriptTag.async = false;\n          scriptTag.src = url;\n          break; // Terminating loop here if we found what we came for.\n        }\n      }\n\n      scriptTags.push(scriptTag);\n    }\n    log(\"In-between\");\n\n    const footer = document.getElementsByTagName(\"footer\")[0];\n\n    // TODO: actually load these async..\n    // An alternative would be to bundle these files\n    // in the dist folder and let the HTTP server\n    // serve them on request.\n    //\n    // Dash core components\n    const dccFiles = [\n      \"async-plotlyjs.js\",\n      \"async-graph.js\",\n      \"async-markdown.js\",\n      \"async-highlight.js\",\n      \"async-dropdown.js\",\n      \"async-slider.js\",\n      \"async-datepicker.js\",\n      \"async-upload.js\",\n      \"dash_core_components.js\",\n      \"dash_core_components-shared.js\",\n    ];\n\n    for (const fileName of dccFiles) {\n      scriptTags.push(await this.generateScriptBlob(directoryMap[\"dcc\"], fileName));\n    }\n\n    // Dash html components\n    const dhcFiles = [\"dash_html_components.min.js\"];\n    for (const fileName of dhcFiles) {\n      scriptTags.push(await this.generateScriptBlob(directoryMap[\"html\"], fileName));\n    }\n\n    // Start up script\n    async function generateStartupScript() {\n      const rendererScriptTag = document.createElement(\"script\");\n      const scriptBlob = new Blob(\n        [await window.workerManager.asyncRun(\"app.renderer\", {})],\n        {\n          type: \"text/javascript\",\n        }\n      );\n      const rendererUrl = URL.createObjectURL(scriptBlob);\n      rendererScriptTag.id = \"_dash-renderer\";\n      rendererScriptTag.async = false;\n      rendererScriptTag.src = rendererUrl;\n      scriptTags.push(rendererScriptTag);\n    }\n\n    await generateStartupScript();\n    scriptTags.forEach((script) => footer.appendChild(script));\n  }\n\n  // Map of {\"fileName\":\"directoryFileIsIn\"} for all\n  // files stored in the virtual file system.\n  async populateFileMap(): Promise<void> {\n    const dcc = await window.workerManager.fsReadDir(\n      directoryMap[\"dcc\"]\n    );\n    const dhc = await window.workerManager.fsReadDir(\n      directoryMap[\"html\"]\n    );\n\n    dcc\n      .filter((fileName) => fileName.match(/.js$/g))\n      .map((fileName) => (this.fileMap[fileName] = \"dash_core_components\"));\n\n    dhc\n      .filter((fileName) => fileName.match(/.js$/g))\n      .map((fileName) => (this.fileMap[fileName] = \"dash_html_components\"));\n  }\n\n  async generateScriptBlob(dir, fileName): Promise<HTMLScriptElement> {\n    log(`JavaScript Blob: processing ${fileName}`)\n    const scriptTag = document.createElement(\"script\");\n    const data = new Blob(\n      [await window.workerManager.fsReadFile(`${dir}${fileName}`)],\n      {\n        type: \"text/javascript\",\n      }\n    );\n    const url = URL.createObjectURL(data);\n    scriptTag.src = url;\n    scriptTag.async = false;\n    return scriptTag;\n  }\n\n  async loadDashScript(dir, fileName) {\n    const script = await this.generateScriptBlob(dir, fileName);\n    const footer = document.getElementsByTagName(\"footer\")[0];\n    footer.appendChild(script);\n  }\n\n  workerManager: WorkerManager;\n  webFlask: WebFlask;\n  fileMap: { [file: string]: string };\n  dev: boolean;\n}\n\nwindow.webDash = new WebDash();\n"]}