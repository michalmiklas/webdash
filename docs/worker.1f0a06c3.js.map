{"version":3,"sources":["worker.js"],"names":["WEBDASH_VERSION","pyodideAddress","loadPyodideAndPackages","self","pyodide","loadPyodide","homedir","indexURL","loadPackage","postConsoleMessage","importScripts","pyodideReadyPromise","fileSystemCall","msgType","param","output","_module","FS","generateResponseObject","pythonResponse","responseBody","get_data","as_text","headerKeys","headers","keys","returnObject","response","Array","from","reduce","acc","val","get","destroy","handleFsCommands","fsCommands","result","postMessageTransferable","buffer","postMessageRegular","error","handlePythonCode","python","loadPackagesFromImports","console","log","err","runPython","isPyProxy","postMessageError","object","postMessage","results","transferable","message","consoleMessage","onmessage","context","event","data","key","Object"],"mappings":";AAAA,MAAMA,EAAkB,QAExB,IAAIC,EAAkB,iEAQtB,eAAeC,IACbC,KAAKC,cAAgBC,YAAY,CAC/BC,QAAS,IACTC,YAAaN,aAETE,KAAKC,QAAQI,YAAY,CAAC,SAAU,QAAS,QAASC,EAAoBA,GARlFC,iBAAiBT,gBAWjB,IAAIU,EAAsBT,IAE1B,SAASU,EAAeC,EAASC,GAKxBC,OAJQX,QAAQY,QAAQC,GAAGJ,GAASC,GAO7C,SAASI,EAAuBC,GACxBC,MAAAA,EAAeD,EAAeE,SAAUC,SAAU,GAClDC,EAAaJ,EAAeK,QAAQC,OACpCC,EAAe,CACnBC,SAAUP,EACVI,QAASI,MAAMC,KAAKN,GAAYO,OAC9B,CAACC,EAAKC,KAAUD,EAAIC,GAAOb,EAAeK,QAAQS,IAAID,GAAOD,GAC7D,KAQGL,OAHPH,EAAWW,UACXf,EAAee,UAERR,EAGT,SAASS,EAAiBC,GAClB,MAAA,QAAEvB,EAAF,MAAWC,GAAUsB,EACvB,IACIC,MAAAA,EAASzB,EAAeC,EAASC,GAC3B,aAAZD,EACIyB,EAAwBD,EAAQ,CAACA,EAAOE,SACxCC,EAAmBH,GACvB,MAAOI,GACPD,EAAmBC,IAIvB,eAAeC,EAAiBC,SAExBxC,KAAKC,QAAQwC,wBAAwBD,EAAQE,QAAQC,IAAKD,QAAQE,KACpEV,IAAAA,QAAelC,KAAKC,QAAQ4C,UAAUL,GAEtCvC,QAAQ6C,UAAUZ,KACpBA,EAASnB,EAAuBmB,IAE9B,IACFG,EAAmBH,GACnB,MAAOI,GACPS,EAAiBT,IA4BrB,SAASD,EAAmBW,GAC1BhD,KAAKiD,YAAY,CACfC,QAASF,IAIb,SAASb,EAAwBa,EAAQG,GACvCnD,KAAKiD,YACH,CACEC,QAASF,GAEXG,GAIJ,SAASJ,EAAiBT,GACxBtC,KAAKiD,YAAY,CACfX,MAAOA,EAAMc,UAIjB,SAAS9C,EAAmB+C,GAC1BrD,KAAKiD,YAAY,CACfI,eAAAA,IA/CJC,UAAY,OAAA,UAEJ9C,EAEA,MAAA,OAAEgC,EAAF,WAAUP,KAAesB,GAAYC,EAAMC,KAK7CxB,GAAAA,EACFD,EAAiBC,OACZ,CAEA,IAAA,MAAMyB,KAAOC,OAAOrC,KAAKiC,GAC5BvD,KAAK0D,GAAOH,EAAQG,GAEtBnB,EAAiBC","file":"worker.1f0a06c3.js","sourceRoot":"../src","sourcesContent":["const WEBDASH_VERSION = \"0.0.3\";\n\nlet pyodideAddress = `https://cdn.jsdelivr.net/gh/ibdafna/webdash_dist@webdash_${WEBDASH_VERSION}`\nif (process.env.NODE_ENV === \"development\") {\n  pyodideAddress = `https://${location.hostname}:${location.port}`;\n}\n\nimportScripts(`${pyodideAddress}/pyodide.js`);\n\n\nasync function loadPyodideAndPackages() {\n  self.pyodide = await loadPyodide({\n    homedir: \"/\",\n    indexURL: `${pyodideAddress}/`,\n  });\n  await self.pyodide.loadPackage([\"pandas\", \"numpy\", \"dash\"], postConsoleMessage, postConsoleMessage);\n}\n\nlet pyodideReadyPromise = loadPyodideAndPackages();\n\nfunction fileSystemCall(msgType, param) {\n  const output = pyodide._module.FS[msgType](param);\n  // Uncomment for debugging purposes\n  // console.log(\"fileSystemCall()\", msgType, param);\n  // console.log(output);\n  return output;\n}\n\nfunction generateResponseObject(pythonResponse) {\n  const responseBody = pythonResponse.get_data((as_text = true));\n  const headerKeys = pythonResponse.headers.keys();\n  const returnObject = {\n    response: responseBody,\n    headers: Array.from(headerKeys).reduce(\n      (acc, val) => ((acc[val] = pythonResponse.headers.get(val)), acc),\n      {}\n    ),\n  };\n\n  // Clean up Proxy Object so we don't leak memory\n  headerKeys.destroy();\n  pythonResponse.destroy();\n\n  return returnObject;\n}\n\nfunction handleFsCommands(fsCommands) {\n  const { msgType, param } = fsCommands;\n  try {\n    const result = fileSystemCall(msgType, param);\n    msgType === \"readFile\"\n      ? postMessageTransferable(result, [result.buffer])\n      : postMessageRegular(result);\n  } catch (error) {\n    postMessageRegular(error);\n  }\n}\n\nasync function handlePythonCode(python) {\n  // Load any imports\n  await self.pyodide.loadPackagesFromImports(python, console.log, console.err)\n  let result = await self.pyodide.runPython(python);\n  // Processing Proxy objects before sending.\n  if (pyodide.isPyProxy(result)) {\n    result = generateResponseObject(result);\n  }\n  try {\n    postMessageRegular(result);\n  } catch (error) {\n    postMessageError(error);\n  }\n}\n\nonmessage = async (event) => {\n  // Making sure we don't arrive early at the party.\n  await pyodideReadyPromise;\n\n  const { python, fsCommands, ...context } = event.data;\n\n  // Uncomment for debugging pureposes\n  // console.log(\"[3. Worker]\", event.data);\n\n  if (fsCommands) {\n    handleFsCommands(fsCommands);\n  } else {\n    // The worker copies the context in its own \"memory\" (an object mapping name to values)\n    for (const key of Object.keys(context)) {\n      self[key] = context[key];\n    }\n    handlePythonCode(python);\n  }\n};\n\n/**\n * Message post functions.\n */\n\nfunction postMessageRegular(object) {\n  self.postMessage({\n    results: object,\n  });\n}\n\nfunction postMessageTransferable(object, transferable) {\n  self.postMessage(\n    {\n      results: object,\n    },\n    transferable\n  );\n}\n\nfunction postMessageError(error) {\n  self.postMessage({\n    error: error.message,\n  });\n}\n\nfunction postConsoleMessage(consoleMessage) {\n  self.postMessage({\n    consoleMessage,\n  });\n}"]}